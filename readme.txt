主な処理
1.PyTorchのライブラリをimportする
2.ShogiNetクラスを定義する
3.forwardメソッドで、モデルのフォワードパスを定義する
4.train関数で、AdamオプティマイザとMSE損失関数を使用して、モデルの訓練を行う
5.preprocess_data関数で、ダミーの将棋盤データと評価値データを生成し、TensorDatasetに変換する
6.train_dataとval_dataに分割されたデータをpreprocess_data関数で生成し、train関数でモデルの訓練を行う

モデルの詳細
1.3チャンネルの9x9の将棋盤を入力する
2.1つのConvolution層（64チャンネル、3x3のカーネル、1のパディング）とReLU関数を持つ
3.1つの全結合層（64 x 9 x 9から256への変換）とReLU関数を持つ
4.1つの出力ノードを持つ全結合層（256から1への変換）を持つ
5.バッチ正規化を行わず、ドロップアウトを行わない

モデルの訓練
1.訓練データと検証データを使用して、モデルを訓練する
2.Adamオプティマイザを使用してパラメータを最適化する
3.MSE損失関数を使用して誤差を計算する
4.ミニバッチ勾配降下法を使用して訓練を行う

データの前処理
1.preprocess_data関数
 1-1.ダミーの将棋盤データと評価値データを生成する
 1-2.データを訓練データと検証データに分割する
 1-3.訓練データと検証データをTorchのTensorDatasetに変換する